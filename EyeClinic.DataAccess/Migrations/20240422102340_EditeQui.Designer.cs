// <auto-generated />
using System;
using EyeClinic.DataAccess.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EyeClinic.DataAccess.Migrations
{
    [DbContext(typeof(EyeClinicContext))]
    [Migration("20240422102340_EditeQui")]
    partial class EditeQui
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.AccountPaymentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountPaymentCategories");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.AppLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrinterName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("WaitingNext")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AppLanguage");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.CartoonLabels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartoonNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CurrentValue")
                        .HasColumnType("float");

                    b.Property<double>("DEntry")
                        .HasColumnType("float");

                    b.Property<double>("DExtry")
                        .HasColumnType("float");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Entry")
                        .HasColumnType("int");

                    b.Property<int>("Extry")
                        .HasColumnType("int");

                    b.Property<int>("FirstDayValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimumValue")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThePaperCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CartoonLabels");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("ContactPhones")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ContactAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("PayOutAccount")
                        .HasColumnType("bit");

                    b.Property<int>("Remaining")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("([TotalCost]-isnull([dbo].[GetTotalContactAccountPayments]([Id],[PayOutAccount]),(0)))", false);

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContactId" }, "IX_ContactAccounts_ContactId");

                    b.ToTable("ContactAccounts");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ContactAccountPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PaymentValue")
                        .HasColumnType("int");

                    b.Property<bool>("PayoutTransaction")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactId");

                    b.HasIndex(new[] { "ContactAccountId" }, "IX_ContactAccountPayment_ContactAccountId");

                    b.ToTable("ContactAccountPayment");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PayOutAccount")
                        .HasColumnType("bit");

                    b.Property<int>("Remaining")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.CustomerNoteStory", b =>
                {
                    b.Property<int>("PublicCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteStory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicCustomerId");

                    b.ToTable("CustomerNoteStories");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.DeniedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeniedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeniedUsers");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double>("CurrentValue")
                        .HasColumnType("float");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Enrty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstDayValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FirstValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThePNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.EyeTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EyeTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Glass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Glasses");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.LabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LabTestName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("LabTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MartialStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MartialStatus");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicalCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MedicalCenters");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicineTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MedicineTypeId" }, "IX_Medicines_MedicineTypeId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicineUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UsageMedicineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UsageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UsageMedicineTypeId" }, "IX_MedicineUsages_UsageMedicineTypeId");

                    b.ToTable("MedicineUsages");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.NotPayReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("NotPayReasons");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.OldMedicineViewTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("_index");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<int?>("TempPrescriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PatientVisitId");

                    b.ToTable("OldMedicineViewTable");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.OldPatientEyeImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OldPatientEyeImages");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsSergical")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndPregnantDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("GlassId")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDrawing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDrinking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MartialStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MotherName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PregnantMonth")
                        .HasColumnType("int");

                    b.Property<bool>("Referral")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartPregnantDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TempId")
                        .HasColumnType("int");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GlassId" }, "IX_Patients_GlassId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Patients_LocationId");

                    b.HasIndex(new[] { "MartialStatusId" }, "IX_Patients_MartialStatusId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgeOfInjury")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("LastCheckMeasure")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MaxMeasure")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiseaseId" }, "IX_PatientDiseases_DiseaseId");

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientDiseases_PatientId");

                    b.ToTable("PatientDiseases");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientGlass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddVision")
                        .HasColumnType("bit")
                        .HasColumnName("Add_Vision");

                    b.Property<bool>("ContactLenses")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LAxis")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Axis");

                    b.Property<string>("LAxis2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Axis2");

                    b.Property<string>("LBase")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("L_Base");

                    b.Property<string>("LBase2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("L_Base2");

                    b.Property<string>("LCyl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Cyl");

                    b.Property<string>("LCyl2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Cyl2");

                    b.Property<string>("LIpd")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_IPD");

                    b.Property<string>("LIpd2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_IPD2");

                    b.Property<string>("LPrism")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Prism");

                    b.Property<string>("LPrism2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Prism2");

                    b.Property<string>("LSph")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Sph");

                    b.Property<string>("LSph2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Sph2");

                    b.Property<string>("LVa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_VA");

                    b.Property<string>("LVa2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_VA2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("RAxis")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Axis");

                    b.Property<string>("RAxis2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Axis2");

                    b.Property<string>("RBase")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("R_Base");

                    b.Property<string>("RBase2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("R_Base2");

                    b.Property<string>("RCyl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Cyl");

                    b.Property<string>("RCyl2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Cyl2");

                    b.Property<string>("RIpd")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_IPD");

                    b.Property<string>("RIpd2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_IPD2");

                    b.Property<string>("RPrism")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Prism");

                    b.Property<string>("RPrism2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Prism2");

                    b.Property<string>("RSph")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Sph");

                    b.Property<string>("RSph2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Sph2");

                    b.Property<string>("RVa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_VA");

                    b.Property<string>("RVa2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_VA2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PatientId" }, "Unique_PatientGlass_PatientId")
                        .IsUnique();

                    b.ToTable("PatientGlass");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterCost")
                        .HasColumnType("int");

                    b.Property<int>("ClinicCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DownPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LeftEyeLens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftEyeLensType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftEyeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeftEyeOperationId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalCenterId")
                        .HasColumnType("int");

                    b.Property<bool>("MedicalCenterReserved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhotoSource")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Remaining")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(isnull(([TotalCost]-[DownPayment])-[dbo].[GetTotalPaymentsByPatientOperationId]([Id]),(0)))", false);

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Revenue")
                        .HasColumnType("int");

                    b.Property<string>("RightEyeLens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightEyeLensType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightEyeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RightEyeOperationId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LeftEyeOperationId" }, "IX_PatientOperations_LeftEyeOperationId");

                    b.HasIndex(new[] { "MedicalCenterId" }, "IX_PatientOperations_MedicalCenterId");

                    b.HasIndex(new[] { "PatientId" }, "IX_PatientOperations_PatientId");

                    b.HasIndex(new[] { "RightEyeOperationId" }, "IX_PatientOperations_RightEyeOperationId");

                    b.ToTable("PatientOperations");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientOperationSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientOperationId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PatientOperationId" }, "IX_PatientOperationSessions_PatientOperationId");

                    b.ToTable("PatientOperationSessions");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientSickStory", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SickStory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId")
                        .HasName("PK_PatientSickStory_PatientId");

                    b.ToTable("PatientSickStory");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotPaymentReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientVisitType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<byte[]>("PdfFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("QueueIndex")
                        .HasColumnType("int");

                    b.Property<int>("RemainPayValue")
                        .HasColumnType("int");

                    b.Property<bool>("RemainPayed")
                        .HasColumnType("bit");

                    b.Property<int>("Remaining")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(case when [NotPaymentReasonId] IS NULL then isnull([Cost]-[Payment],(0)) else (0) end)", false);

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("VisitIndex")
                        .HasColumnType("int");

                    b.Property<byte>("VisitStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Why")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex(new[] { "NotPaymentReasonId" }, "IX_PatientVisits_NotPaymentReasonId");

                    b.HasIndex(new[] { "VisitDate" }, "IX_PatientVisits_PatientId_VisitDate");

                    b.ToTable("PatientVisits");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("LeftEye")
                        .HasColumnType("bit");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiagnosisId" }, "IX_PatientVisitDiagnosis_DiagnosisId");

                    b.HasIndex(new[] { "PatientVisitId" }, "IX_PatientVisitDiagnosis_PatientVisitId");

                    b.ToTable("PatientVisitDiagnosis");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitEyeTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EyeTestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LeftEyeResult")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<string>("RightEyeResult")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EyeTestId" }, "IX_PatientVisitEyeTests_EyeTestId");

                    b.HasIndex(new[] { "PatientVisitId" }, "IX_PatientVisitEyeTests_PatientVisitId");

                    b.ToTable("PatientVisitEyeTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitEyeTestHistory", b =>
                {
                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EyeTestId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LeftEyeResult")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<string>("RightEyeResult")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToTable("PatientVisitEyeTestHistory");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitGlass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddVision")
                        .HasColumnType("bit")
                        .HasColumnName("Add_Vision");

                    b.Property<bool>("ContactLenses")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LAxis")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Axis");

                    b.Property<string>("LAxis2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Axis2");

                    b.Property<string>("LBase")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("L_Base");

                    b.Property<string>("LBase2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("L_Base2");

                    b.Property<string>("LCyl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Cyl");

                    b.Property<string>("LCyl2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Cyl2");

                    b.Property<string>("LIpd")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_IPD");

                    b.Property<string>("LIpd2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_IPD2");

                    b.Property<string>("LPrism")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Prism");

                    b.Property<string>("LPrism2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Prism2");

                    b.Property<string>("LSph")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Sph");

                    b.Property<string>("LSph2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_Sph2");

                    b.Property<string>("LVa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_VA");

                    b.Property<string>("LVa2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("L_VA2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<string>("RAxis")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Axis");

                    b.Property<string>("RAxis2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Axis2");

                    b.Property<string>("RBase")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("R_Base");

                    b.Property<string>("RBase2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("R_Base2");

                    b.Property<string>("RCyl")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Cyl");

                    b.Property<string>("RCyl2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Cyl2");

                    b.Property<string>("RIpd")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_IPD");

                    b.Property<string>("RIpd2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_IPD2");

                    b.Property<string>("RPrism")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Prism");

                    b.Property<string>("RPrism2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Prism2");

                    b.Property<string>("RSph")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Sph");

                    b.Property<string>("RSph2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_Sph2");

                    b.Property<string>("RVa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_VA");

                    b.Property<string>("RVa2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_VA2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PatientVisitId" }, "IX_PatientVisitGlass_PatientVisitId");

                    b.ToTable("PatientVisitGlass");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<int>("LabTestId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LabTestId" }, "IX_PatientVisitLabTests_LabTestId");

                    b.HasIndex(new[] { "PatientVisitId" }, "IX_PatientVisitLabTests_PatientVisitId");

                    b.ToTable("PatientVisitLabTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineUsageId")
                        .HasColumnType("int");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicCustomerOrderId")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublicCustomerOrderId");

                    b.HasIndex(new[] { "MedicineId" }, "IX_PatientVisitPrescriptions_MedicineId");

                    b.HasIndex(new[] { "MedicineUsageId" }, "IX_PatientVisitPrescriptions_MedicineUsageId");

                    b.HasIndex(new[] { "PatientVisitId" }, "IX_PatientVisitPrescriptions_PatientVisitId");

                    b.ToTable("PatientVisitPrescriptions");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitsTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostPayment")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Dropped")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNameBoth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNameLeft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNameRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNumber")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("LeftEye")
                        .HasColumnType("bit");

                    b.Property<string>("LeftEyeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalCenterId")
                        .HasColumnType("int");

                    b.Property<int>("PatientVisitId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicCustomerOrderId")
                        .HasColumnType("int");

                    b.Property<bool>("RightEye")
                        .HasColumnType("bit");

                    b.Property<string>("RightEyeNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalCenterId");

                    b.HasIndex("PublicCustomerOrderId");

                    b.HasIndex(new[] { "PatientVisitId" }, "IX_PatientVisitsTests_PatientVisitId");

                    b.HasIndex(new[] { "TestId" }, "IX_PatientVisitsTests_TestId");

                    b.ToTable("PatientVisitsTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Paid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PaymentTypeId" }, "IX_Payments_PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Debt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Remaining")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(isnull([TotalCost]-[dbo].[GetTotalPaymentByPaymentTypeId]([Id]),(0)))", false);

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPayments")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("([dbo].[GetTotalPaymentByPaymentTypeId]([Id]))", false);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Payout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payouts");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PublicCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSmoking")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MartialStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<bool>("Referral")
                        .HasColumnType("bit");

                    b.Property<int?>("TempId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PublicCustomers");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PublicCustomerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<byte>("OrderStatus")
                        .HasColumnType("tinyint");

                    b.Property<int>("PubliCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("PublicCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PublicCustomerOrderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueueIndex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpComingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Why")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublicCustomerId");

                    b.ToTable("PublicCustomerOrders");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MedicalReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotPaymentReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Payment")
                        .HasColumnType("int");

                    b.Property<int?>("PublicCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Remaining")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(case when [NotPaymentReasonId] IS NULL then isnull([Cost]-[Payment],(0)) else (0) end)", false);

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("VisitIndex")
                        .HasColumnType("int");

                    b.Property<byte>("VisitStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PublicCustomerId");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ReadyItemProducting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ProductingValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Producting");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ReadyPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ReadyPrescriptions");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ReadyPrescriptionMedicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineUsageId")
                        .HasColumnType("int");

                    b.Property<int>("ReadyPrescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MedicineId" }, "IX_ReadyPrescriptionMedicines_MedicineId");

                    b.HasIndex(new[] { "MedicineUsageId" }, "IX_ReadyPrescriptionMedicines_MedicineUsageId");

                    b.HasIndex(new[] { "ReadyPrescriptionId" }, "IX_ReadyPrescriptionMedicines_ReadyPrescriptionId");

                    b.ToTable("ReadyPrescriptionMedicines");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ReadyProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("CreatedValue")
                        .HasColumnType("float");

                    b.Property<string>("CreatedValueUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ExportedValue")
                        .HasColumnType("float");

                    b.Property<string>("ExportedValueUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIncreaseDogma")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("ProductedValue")
                        .HasColumnType("float");

                    b.Property<string>("ProductedValueUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalResult")
                        .HasColumnType("float");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.Property<double>("TotalWaste")
                        .HasColumnType("float");

                    b.Property<double>("TotalWight")
                        .HasColumnType("float");

                    b.Property<double>("WasteValue")
                        .HasColumnType("float");

                    b.Property<string>("WasteValueUnit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReadyProducts");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReminderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReminderText")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("PatientVisitType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReservationTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PassWrong")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArName = "مسؤول",
                            CreatedDate = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "Admin",
                            PassWrong = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ArName = "استقبال",
                            CreatedDate = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "Reception",
                            PassWrong = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ArName = "ممرضة",
                            CreatedDate = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "Nurse",
                            PassWrong = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ArName = "طبيب",
                            CreatedDate = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "Doctor",
                            PassWrong = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstTermBalance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Imagex")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Imagex2")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Imagex3")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Imagex4")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Quintity")
                        .HasColumnType("float");

                    b.Property<double>("TotalResult")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitValue")
                        .HasColumnType("float");

                    b.Property<double>("WasteValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.HasIndex(new[] { "UserName" }, "Unique_Users_UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Password = "1",
                            RoleId = 1,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.VisitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VisitType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArName = "مراجعة",
                            Cost = 0,
                            CreatedDate = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "Review"
                        },
                        new
                        {
                            Id = 2,
                            ArName = "مراجعة مدفوعة",
                            Cost = 10000,
                            CreatedDate = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "Payment Review"
                        },
                        new
                        {
                            Id = 3,
                            ArName = "اول مرة",
                            Cost = 15000,
                            CreatedDate = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "First Time"
                        },
                        new
                        {
                            Id = 4,
                            ArName = "زيارة جديدة",
                            Cost = 15000,
                            CreatedDate = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "New Visit"
                        },
                        new
                        {
                            Id = 5,
                            ArName = "IOP",
                            Cost = 10000,
                            CreatedDate = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnName = "IOP"
                        });
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ContactAccount", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Contact", "Contact")
                        .WithMany("ContactAccounts")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactAccounts_ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ContactAccountPayment", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.AccountPaymentCategory", "Category")
                        .WithMany("ContactAccountPayments")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ContactAccountPayment_ContactAccountPaymentCategories_CategoryId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.ContactAccount", "ContactAccount")
                        .WithMany("ContactAccountPayments")
                        .HasForeignKey("ContactAccountId");

                    b.HasOne("EyeClinic.DataAccess.Entities.Contact", "Contact")
                        .WithMany("ContactAccountPayments")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Contact");

                    b.Navigation("ContactAccount");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.CustomerNoteStory", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.PublicCustomer", "PublicCustomer")
                        .WithOne("CustomerNoteStory")
                        .HasForeignKey("EyeClinic.DataAccess.Entities.CustomerNoteStory", "PublicCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicCustomer");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Medicine", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.MedicineType", "MedicineType")
                        .WithMany("Medicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicineType");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicineUsage", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.MedicineType", "UsageMedicineType")
                        .WithMany("MedicineUsages")
                        .HasForeignKey("UsageMedicineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsageMedicineType");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.OldMedicineViewTable", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("OldMedicineViewTables")
                        .HasForeignKey("PatientVisitId")
                        .HasConstraintName("FK_OldMedicineViewTable_PatientVisit_PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientVisit");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Patient", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Glass", "Glass")
                        .WithMany("Patients")
                        .HasForeignKey("GlassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.Location", "Location")
                        .WithMany("Patients")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.MartialStatus", "MartialStatus")
                        .WithMany("Patients")
                        .HasForeignKey("MartialStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Glass");

                    b.Navigation("Location");

                    b.Navigation("MartialStatus");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientDisease", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Disease", "Disease")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("DiseaseId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("PatientId")
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientGlass", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Patient", "Patient")
                        .WithOne("PatientGlass")
                        .HasForeignKey("EyeClinic.DataAccess.Entities.PatientGlass", "PatientId")
                        .HasConstraintName("FK_PatientGlass_PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientOperation", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Operation", "LeftEyeOperation")
                        .WithMany("PatientOperationLeftEyeOperations")
                        .HasForeignKey("LeftEyeOperationId");

                    b.HasOne("EyeClinic.DataAccess.Entities.MedicalCenter", "MedicalCenter")
                        .WithMany("PatientOperations")
                        .HasForeignKey("MedicalCenterId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("PatientOperations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.Operation", "RightEyeOperation")
                        .WithMany("PatientOperationRightEyeOperations")
                        .HasForeignKey("RightEyeOperationId");

                    b.Navigation("LeftEyeOperation");

                    b.Navigation("MedicalCenter");

                    b.Navigation("Patient");

                    b.Navigation("RightEyeOperation");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientOperationSession", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.PatientOperation", "PatientOperation")
                        .WithMany("PatientOperationSessions")
                        .HasForeignKey("PatientOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientOperation");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientSickStory", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Patient", "Patient")
                        .WithOne("PatientSickStory")
                        .HasForeignKey("EyeClinic.DataAccess.Entities.PatientSickStory", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisit", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.NotPayReason", "NotPaymentReason")
                        .WithMany("PatientVisits")
                        .HasForeignKey("NotPaymentReasonId")
                        .HasConstraintName("FK_PatientVisits_NotPayReasons_Id");

                    b.HasOne("EyeClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("PatientVisits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotPaymentReason");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitDiagnosis", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Diagnosis", "Diagnosis")
                        .WithMany("PatientVisitDiagnoses")
                        .HasForeignKey("DiagnosisId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("PatientVisitDiagnoses")
                        .HasForeignKey("PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("PatientVisit");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitEyeTest", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.EyeTest", "EyeTest")
                        .WithMany("PatientVisitEyeTests")
                        .HasForeignKey("EyeTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("PatientVisitEyeTests")
                        .HasForeignKey("PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EyeTest");

                    b.Navigation("PatientVisit");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitGlass", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("PatientVisitGlasses")
                        .HasForeignKey("PatientVisitId")
                        .HasConstraintName("FK_PatientVisitGlass_PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientVisit");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitLabTest", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.LabTest", "LabTest")
                        .WithMany("PatientVisitLabTests")
                        .HasForeignKey("LabTestId")
                        .HasConstraintName("FK_PatientVisitLabTests_LabTestId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("PatientVisitLabTests")
                        .HasForeignKey("PatientVisitId")
                        .HasConstraintName("FK_PatientVisitLabTests_PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("PatientVisit");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitPrescription", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Medicine", "Medicine")
                        .WithMany("PatientVisitPrescriptions")
                        .HasForeignKey("MedicineId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.MedicineUsage", "MedicineUsage")
                        .WithMany("PatientVisitPrescriptions")
                        .HasForeignKey("MedicineUsageId")
                        .HasConstraintName("FK_PatientVisitPrescriptions_MedicineUsages_UsageId")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("PatientVisitPrescriptions")
                        .HasForeignKey("PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PublicCustomerOrder", null)
                        .WithMany("PatientVisitPrescriptions")
                        .HasForeignKey("PublicCustomerOrderId");

                    b.Navigation("Medicine");

                    b.Navigation("MedicineUsage");

                    b.Navigation("PatientVisit");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisitsTest", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.MedicalCenter", "MedicalCenter")
                        .WithMany()
                        .HasForeignKey("MedicalCenterId");

                    b.HasOne("EyeClinic.DataAccess.Entities.PatientVisit", "PatientVisit")
                        .WithMany("PatientVisitsTests")
                        .HasForeignKey("PatientVisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PublicCustomerOrder", null)
                        .WithMany("PatientVisitsTests")
                        .HasForeignKey("PublicCustomerOrderId");

                    b.HasOne("EyeClinic.DataAccess.Entities.Test", "Test")
                        .WithMany("PatientVisitsTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalCenter");

                    b.Navigation("PatientVisit");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Payment", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PublicCustomer", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PublicCustomerOrder", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.PublicCustomer", "PublicCustomer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("PublicCustomerId");

                    b.Navigation("PublicCustomer");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Queue", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Patient", "Patient")
                        .WithMany("Queues")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.PublicCustomer", null)
                        .WithMany("Queues")
                        .HasForeignKey("PublicCustomerId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ReadyPrescriptionMedicine", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Medicine", "Medicine")
                        .WithMany("ReadyPrescriptionMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.MedicineUsage", "MedicineUsage")
                        .WithMany("ReadyPrescriptionMedicines")
                        .HasForeignKey("MedicineUsageId")
                        .HasConstraintName("FK_ReadyPrescriptionMedicines_MedicineUsages")
                        .IsRequired();

                    b.HasOne("EyeClinic.DataAccess.Entities.ReadyPrescription", "ReadyPrescription")
                        .WithMany("ReadyPrescriptionMedicines")
                        .HasForeignKey("ReadyPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("MedicineUsage");

                    b.Navigation("ReadyPrescription");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.User", b =>
                {
                    b.HasOne("EyeClinic.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.AccountPaymentCategory", b =>
                {
                    b.Navigation("ContactAccountPayments");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Contact", b =>
                {
                    b.Navigation("ContactAccountPayments");

                    b.Navigation("ContactAccounts");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ContactAccount", b =>
                {
                    b.Navigation("ContactAccountPayments");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Diagnosis", b =>
                {
                    b.Navigation("PatientVisitDiagnoses");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Disease", b =>
                {
                    b.Navigation("PatientDiseases");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.EyeTest", b =>
                {
                    b.Navigation("PatientVisitEyeTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Glass", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.LabTest", b =>
                {
                    b.Navigation("PatientVisitLabTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Location", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MartialStatus", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicalCenter", b =>
                {
                    b.Navigation("PatientOperations");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Medicine", b =>
                {
                    b.Navigation("PatientVisitPrescriptions");

                    b.Navigation("ReadyPrescriptionMedicines");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicineType", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("MedicineUsages");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.MedicineUsage", b =>
                {
                    b.Navigation("PatientVisitPrescriptions");

                    b.Navigation("ReadyPrescriptionMedicines");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.NotPayReason", b =>
                {
                    b.Navigation("PatientVisits");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Operation", b =>
                {
                    b.Navigation("PatientOperationLeftEyeOperations");

                    b.Navigation("PatientOperationRightEyeOperations");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Patient", b =>
                {
                    b.Navigation("PatientDiseases");

                    b.Navigation("PatientGlass");

                    b.Navigation("PatientOperations");

                    b.Navigation("PatientSickStory");

                    b.Navigation("PatientVisits");

                    b.Navigation("Queues");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientOperation", b =>
                {
                    b.Navigation("PatientOperationSessions");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PatientVisit", b =>
                {
                    b.Navigation("OldMedicineViewTables");

                    b.Navigation("PatientVisitDiagnoses");

                    b.Navigation("PatientVisitEyeTests");

                    b.Navigation("PatientVisitGlasses");

                    b.Navigation("PatientVisitLabTests");

                    b.Navigation("PatientVisitPrescriptions");

                    b.Navigation("PatientVisitsTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PaymentType", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PublicCustomer", b =>
                {
                    b.Navigation("CustomerNoteStory");

                    b.Navigation("CustomerOrders");

                    b.Navigation("Queues");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.PublicCustomerOrder", b =>
                {
                    b.Navigation("PatientVisitPrescriptions");

                    b.Navigation("PatientVisitsTests");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.ReadyPrescription", b =>
                {
                    b.Navigation("ReadyPrescriptionMedicines");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EyeClinic.DataAccess.Entities.Test", b =>
                {
                    b.Navigation("PatientVisitsTests");
                });
#pragma warning restore 612, 618
        }
    }
}
